# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Commit Executable

on:
  push:
    branches: [ "master" ] # Only run on pushes to master

# Prevent concurrent runs for the same branch, cancel older runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .  # Assumes solution is in the root

  # Configuration type to build.
  BUILD_CONFIGURATION: Release

  # Platform type to build.
  BUILD_PLATFORM: x64 # Based on your output path 'x64\Release'

  # Name of the executable file produced.
  EXECUTABLE_NAME: Backstab.exe

  # Name of the folder to place the release executable in root.
  RELEASE_FOLDER: release

permissions:
  # Need write permissions to commit and push the executable
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # Fetch full history so we can push back later
      with:
        fetch-depth: 0

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add platform to the build command if needed by your project
      # The output path seems to be implicitly '<Platform>\<Configuration>'
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}}

    - name: Copy Executable to Release Folder
      id: copy_exe
      run: |
        # Construct the expected path based on environment variables and provided output structure
        $sourceExePath = Join-Path -Path ${{ env.GITHUB_WORKSPACE }} -ChildPath '${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\${{ env.EXECUTABLE_NAME }}'

        Write-Host "Looking for executable at: $sourceExePath"

        if (-not (Test-Path $sourceExePath -PathType Leaf)) {
          Write-Error "Executable not found at expected path: $sourceExePath. Please verify build output location."
          # List directory contents for debugging help
          Write-Host "Contents of ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\:"
          Get-ChildItem -Path (Join-Path -Path ${{ env.GITHUB_WORKSPACE }} -ChildPath '${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}') -ErrorAction SilentlyContinue | Format-Table Name, Length, LastWriteTime
          exit 1
        }

        $targetDir = Join-Path -Path ${{ env.GITHUB_WORKSPACE }} -ChildPath ${{ env.RELEASE_FOLDER }}
        New-Item -Path $targetDir -ItemType Directory -Force # Create directory if it doesn't exist
        Copy-Item -Path $sourceExePath -Destination $targetDir -Force
        Write-Host "Copied '$($sourceExePath.Split('\')[-1])' to '${{ env.RELEASE_FOLDER }}/' folder."
      shell: pwsh # Use PowerShell

    - name: Commit and Push Executable
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add ${{ env.RELEASE_FOLDER }}/${{ env.EXECUTABLE_NAME }}  # Stage the specific executable in the release folder
        # Check if there are changes to commit
        if (git diff --staged --quiet) {
          echo "No changes in release executable to commit."
        } else {
          echo "Changes detected in release executable. Committing..."
          git commit -m "Auto-build: Update executable ${{ env.EXECUTABLE_NAME }} in ${{ env.RELEASE_FOLDER }} [skip ci]"
          echo "Pushing changes to origin master..."
          git push origin master
          echo "Executable committed and pushed to master."
        }
      shell: pwsh # Use PowerShell
